name: Build JANGLE
on:
  - pull_request
  - push

jobs:
  build:
    name: Build ${{matrix.arch}}-${{matrix.os}}-${{matrix.buildType}}
    runs-on: ${{matrix.environment}}

    env:
      vcpkgResponseFile: ${{github.workspace}}/vcpkg-dependencies

    strategy:
      fail-fast: false
      matrix:
        os: [windows, linux, osx]
        arch: [x64]
        buildType: [Release]
        javaVersion: [8]

        include:
          - os: windows
            arch: x64
            environment: windows-2019
            buildType: Release
            javaVersion: 8
            uploadArtifacts: true
            soPrefix: ''
            soExtension: dll

          - os: windows
            arch: x64
            environment: windows-2019
            buildType: Debug
            javaVersion: 8
            
          - os: linux
            arch: x64
            environment: ubuntu-18.04
            buildType: Release
            javaVersion: 8
            uploadArtifacts: true
            displayWrapper: xvfb-run
            soPrefix: lib
            soExtension: so

          - os: osx
            arch: x64
            environment: macos-latest
            buildType: Release
            javaVersion: 8
            uploadArtifacts: true
            soPrefix: lib
            soExtension: dylib

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
            submodules: true

      # Would also install these Ubuntu if they weren't installed by other steps: cmake, ninja-build
      - name: Set up Ubuntu packages
        run: sudo apt-get install curl libgl1-mesa-dev libx11-dev xvfb 
        if: ${{startsWith(matrix.environment, 'ubuntu')}}

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{matrix.javaVersion}}
          architecture: ${{matrix.arch}}

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v2
        with:
          vcpkgTriplet: ${{matrix.arch}}-${{matrix.os}}
          vcpkgArguments: '@${{env.vcpkgResponseFile}}'
          vcpkgDirectory: ${{github.workspace}}/vcpkg
          # Since the cache must be invalidated when content of the response file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: ${{hashFiles(env.vcpkgResponseFile)}}

      - name: CMake
        uses: lukka/run-cmake@v2
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          useVcpkgToolchainFile: true
          buildDirectory: ${{runner.workspace}}/out/build
          cmakeAppendedArgs: '-GNinja -DCMAKE_BUILD_TYPE=${{matrix.buildType}} '

      - name: List build directory
        run: ls ${{runner.workspace}}/out/build/

      - name: Run native tests
        run: ${{matrix.displayWrapper || ''}} ${{runner.workspace}}/out/build/angle_easy_tests

      # The classpath separator character is different on Windows (;) versus other platforms (:). One way to avoid
      # using it is to pass * as the classpath, which causes java to put all .jar files in a directory in the classpath.
      # This requires avoiding bash's globbing, which would substitute the * before java saw it.
      #
      # Java puts the current working directory on java.library.path by default on Windows and Linux but not OSX so
      # set it explicitly.
      - name: Run Java tests
        run: |
          set -o noglob
          ${{matrix.displayWrapper || ''}} java -cp * -Djava.library.path=. JavaSmokeTest
        shell: bash
        working-directory: ${{runner.workspace}}/out/build

      - name: Upload JAR files
        uses: actions/upload-artifact@v2
        if: ${{matrix.uploadArtifacts}}
        with:
          name: ${{matrix.arch}}-${{matrix.os}}
          path: ${{runner.workspace}}/out/build/*.jar

      - name: Upload Windows shared library
        uses: actions/upload-artifact@v2
        if: ${{matrix.uploadArtifacts}}
        with:
          name: ${{matrix.arch}}-${{matrix.os}}
          path: ${{runner.workspace}}/out/build/${{matrix.soPrefix}}JANGLE.${{matrix.soExtension}}

  package:
    name: Package JANGLE
    needs: build
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{runner.workspace}}/artifacts

      - name: List artifacts
        run: ls -R ${{runner.workspace}}/artifacts

      - name: Add to zip file
        run: |
          mkdir -p ${{runner.workspace}}/out/resources/android/opengl/x64-windows
          cp ${{runner.workspace}}/artifacts/x64-windows/JANGLE.dll ${{runner.workspace}}/out/resources/android/opengl/x64-windows/

          mkdir -p ${{runner.workspace}}/out/resources/android/opengl/x64-linux
          cp ${{runner.workspace}}/artifacts/x64-linux/libJANGLE.so ${{runner.workspace}}/out/resources/android/opengl/x64-linux/

          mkdir -p ${{runner.workspace}}/out/resources/android/opengl/x64-osx
          cp ${{runner.workspace}}/artifacts/x64-osx/libJANGLE.dylib ${{runner.workspace}}/out/resources/android/opengl/x64-osx/

          mkdir -p ${{runner.workspace}}/out/resources/META-INF
          cp ${{github.workspace}}/LICENSE* ${{runner.workspace}}/out/resources/META-INF

          cp ${{runner.workspace}}/artifacts/x64-windows/JANGLE.jar ${{runner.workspace}}/out/
          pushd ${{runner.workspace}}/out/resources/
          zip -r ${{runner.workspace}}/out/JANGLE.jar *
          popd

      - name: Upload multi-platform JAR file
        uses: actions/upload-artifact@v2
        with:
          name: multi
          path: ${{runner.workspace}}/out/JANGLE.jar

  test:
    name: Test ${{matrix.arch}}-${{matrix.os}}
    needs: package
    
    runs-on: ${{matrix.environment}}

    env:
      vcpkgResponseFile: ${{github.workspace}}/vcpkg-dependencies

    strategy:
      fail-fast: false
      matrix:
        os: [windows, linux, osx]
        javaVersion: [8]

        include:
          - os: windows
            arch: x64
            environment: windows-2019
            javaVersion: 8
            
          - os: linux
            arch: x64
            environment: ubuntu-18.04
            javaVersion: 8
            displayWrapper: xvfb-run

          - os: osx
            arch: x64
            environment: macos-latest
            javaVersion: 8

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      # Would also install these Ubuntu if they weren't installed by other steps: cmake, ninja-build
      - name: Set up Ubuntu packages
        run: sudo apt-get install curl libgl1-mesa-dev libx11-dev xvfb 
        if: ${{startsWith(matrix.environment, 'ubuntu')}}

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{matrix.javaVersion}}
          architecture: ${{matrix.arch}}

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{runner.workspace}}/artifacts

      - name: List artifacts
        run: ls -R ${{runner.workspace}}/artifacts

      - name: Prepare Java tests
        run: |
          mkdir -p ${{runner.workspace}}/out
          cp ${{runner.workspace}}/artifacts/${{matrix.arch}}-${{matrix.os}}/*.jar ${{runner.workspace}}/out
          cp ${{runner.workspace}}/artifacts/multi/JANGLE.jar ${{runner.workspace}}/out

      # The classpath separator character is different on Windows (;) versus other platforms (:). One way to avoid
      # using it is to pass * as the classpath, which causes java to put all .jar files in a directory in the classpath.
      # This requires avoiding bash's globbing, which would substitute the * before java saw it.
      - name: Run Java tests
        run: |
          set -o noglob
          ${{matrix.displayWrapper || ''}} java -cp * JavaSmokeTest
        shell: bash
        working-directory: ${{runner.workspace}}/out

  publish:
    name: Publish JANGLE snapshot
    needs: test
    if: ${{github.event_name == 'push' && github.ref == 'refs/heads/master'}}
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{runner.workspace}}/artifacts

        # This action configures the github maven repository used by the maven deploy step below.
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
      - name: Publish package
        run: mvn -B deploy:deploy-file -Dfile=${{runner.workspace}}/artifacts/multi/JANGLE.jar -DpomFile=${{github.workspace}}/pom.xml -DrepositoryId=github -Durl=https://maven.pkg.github.com/alastairpatrick/jangle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
